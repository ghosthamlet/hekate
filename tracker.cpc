/*
Copyright (c) 2009-2011 by Pejman Attar, Yoann Canal, Juliusz Chroboczek and
                      Gabriel Kerneis

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

#define _GNU_SOURCE

#include <cpc/cpc_runtime.h>
#include <cpc/cpc_lib.h>

#include <curl/curl.h>
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <openssl/sha.h>

#include "dht/dht.h"
#pragma cpc_no_retain("dht_periodic")
#include "io.h"
#include "list.h"
#include "torrent.h"
#include "server.h"
#include "tracker.h"
#include "util.h"


char peer_id[21];
int notracker = 0, nodht = 0;
int noipv4 = 0;
int noipv6 = 0;

#define MAX(x, y) ((x) >= (y) ? (x) : (y))

char *
generate_get(char *url, struct torrent *t, char *event, CURL *e_handler)
{
    int length, rc;
    char *res, *hash;

    hash = curl_easy_escape(e_handler, (char *)t->info_hash, 20);
    if(!hash) {
        fprintf(stderr, "Error (generate_get) : curl_easy_escape\n");
        return NULL;
    }

    rc = asprintf(&res, "%s%cinfo_hash=%s&peer_id=%.20s&port=%d&"
                  "uploaded=%lu&downloaded=0&left=0%s%s"
                  "&compact=1&numwant=0&no_peer_id=1",
                  url, strchr(url, '?') ? '&' : '?', hash, peer_id, peer_port,
                  (unsigned long)t->uploaded,
                  event ? "&event=" : "", event ? event : "");
    if(rc < 0)
        res = NULL;
    curl_free(hash);
    return res;
}

static size_t
writer(void *ptr, size_t size, size_t nmemb, void *stream)
{
    struct torrent *tor = stream;
    char *p;
    int interval = -1;

    /* We really should reassemble the pieces and use a proper bencoding
       parser.  This will do for now. */
    p = memmem(ptr, size * nmemb, "8:intervali", 11);
    if(p && p < ptr + size * nmemb) {
        p += 11;
        interval = 0;
        while(p < ptr + size * nmemb && *p >= '0' && *p <= '9') {
            interval = interval * 10 + (*p - '0');
            p++;
        }
        if(interval < 120 || interval > 24 * 3600) {
            fprintf(stderr, "Unexpected interval %d\n", interval);
            interval = -1;
        }
    }

    tor->update_interval = interval;
    return nmemb;
}

static cps void
connection(tr_list *t, int ipv6, char *event)
{
  connection:;
    CURLcode rc = NULL;
    CURL *e_handle = NULL;
    char *request = NULL;
    to_list *current = NULL;
    long http_code;
    int interval = -1;

    if(strncmp(t->url, "http://", 7) != 0) {
        fprintf(stderr, "(connection)bad tracker url: %s\n", t->url);
        return;
    };

    e_handle = curl_easy_init();
    if(!e_handle) goto fail;
    cpc_detach();
    for(current = t->head; current; current = current->next) {
        request = generate_get(t->url, current->elmt, event, e_handle);
        if(!request) {
            perror("(connection)generate_get");
            continue;
        }

        if(getenv( "HK_CURL_VERBOSE") != NULL)
            curl_easy_setopt(e_handle, CURLOPT_VERBOSE, 1);

        rc = curl_easy_setopt(e_handle, CURLOPT_URL, request);
        if(rc != CURLE_OK) goto curl_error;

        rc = curl_easy_setopt(e_handle, CURLOPT_FOLLOWLOCATION, 1);
        if(rc != CURLE_OK) goto curl_error;

        rc = curl_easy_setopt(e_handle, CURLOPT_MAXREDIRS, 8);
        if(rc != CURLE_OK) goto curl_error;

        rc = curl_easy_setopt(e_handle, CURLOPT_IPRESOLVE,
                              ipv6 ? CURL_IPRESOLVE_V6 : CURL_IPRESOLVE_V4);
        if(rc != CURLE_OK) goto curl_error;

        rc = curl_easy_setopt(e_handle, CURLOPT_WRITEDATA, current->elmt);
        if(rc != CURLE_OK) goto curl_error;

        rc = curl_easy_setopt(e_handle, CURLOPT_WRITEFUNCTION, writer);
        if(rc != CURLE_OK) goto curl_error;

        /* Prevents mysterious segfaults.  Related to multithread and
         * signals.
         * Side-effects: timeouts will not occur while the name resolve
         * takes place, and curl does not ignore SIPIPE anymore.  We
         * don't use curl timeouts and already block SIGPIPE anyway. */
        rc = curl_easy_setopt(e_handle, CURLOPT_NOSIGNAL, 1);
        if(rc != CURLE_OK) goto curl_error;

        rc = curl_easy_perform(e_handle);
        if(rc != CURLE_OK) goto curl_error;

        rc = curl_easy_getinfo(e_handle, CURLINFO_RESPONSE_CODE, &http_code);
        if(rc != CURLE_OK) goto curl_error;
        if(http_code != 200) {
            fprintf(stderr, "Warning: tracker returned %ld (%s).\n",
                    http_code, request);
        }

        free(request);

        if(current->elmt->update_interval > 0) {
            if(interval < 0)
                interval = current->elmt->update_interval;
            else
                interval = MAX(interval, current->elmt->update_interval);
        }

        continue;

    curl_error:
        if(noipv4 || !ipv6)
            fprintf(stderr, "curl error: %s (%s)\n",
                    curl_easy_strerror(rc), request);
        free(request);

        curl_easy_cleanup(e_handle);
        e_handle = curl_easy_init();
        if(!e_handle) goto fail;
    }
    cpc_attach();
    curl_easy_cleanup(e_handle);

    cpc_sleep(interval > 0 ? interval : 1800);
    event = NULL;
    goto connection;

 fail:
    cpc_attach();
    fprintf(stderr, "Couldn't allocate CURL request.\n");
    cpc_sleep(interval > 0 ? interval : 1800);
    goto connection;
}

static cps void
dht_announcer(int af)
{
    while(1) {
        int rc;
        tr_list *current;

        /* Wait for the DHT to be ready. */
        while(1) {
            rc = dht_nodes(af, NULL, NULL, NULL, NULL);
            if(rc >= 16)
                break;
            cpc_sleep(30 + random() % 30, random() % 1000000);
        }

        current = trackers;
        while(current) {
            to_list *tor = current->head;
            while(tor) {
                if(!tor->elmt->private)
                    dht_search(tor->elmt->info_hash, peer_port, af,
                               NULL, NULL);
                tor = tor->next;
            }
            cpc_sleep(0, random() % 1000000);
            current = current->next;
        }

        cpc_sleep(25 * 60 + random() % (3 * 60), random() % 1000000);
    }
}

/* dht's backlog functions */
static cps void dht_loop_aux(int dht_socket, cpc_condvar *cond);
static time_t dht_tosleep = 0;
static cpc_timeout *dht_timeout = NULL;

static cps void
dht_loop(int dht_socket, int dht6_socket)
{
    cpc_condvar *cond = NULL;
    assert(dht_socket > 0 || dht6_socket > 0);
    cpc_timeout *tmp_timeout = NULL; /* TODO: this variable is use to avoid
                                      the bug on static assignment. */

    tmp_timeout = cpc_timeout_get(dht_tosleep, random() % 1000000);
    dht_timeout = tmp_timeout;
    cond = cpc_timeout_condvar(dht_timeout);

    if(dht_socket != NULL)
        cpc_spawn dht_loop_aux(dht_socket, cond);

    if(dht6_socket != NULL)
        cpc_spawn dht_loop_aux(dht6_socket, dht_socket == NULL ? cond : NULL);
}

static cps void
dht_loop_aux(int dht_socket, cpc_condvar *cond)
{
    static char buf[1537];
    int rc;
    int64_t rc64;
    struct sockaddr_storage from;
    socklen_t fromlen;

    while(1) {
        cpc_timeout_restart(dht_timeout, dht_tosleep, random() % 1000000);
        fromlen = sizeof(from);

        if(dht_socket < 0)
            cpc_io_wait(dht_socket, CPC_IO_IN, cond);

        rc = recvfrom(dht_socket, buf, 1536, 0,
                      (struct sockaddr*)&from, &fromlen);
        if(rc < 0 && errno != EAGAIN && errno != EINTR) {
            perror("recvfrom(dht_socket)");
        }

        if(rc > 0) {
            buf[rc] = '\0';
            rc = dht_periodic(buf, rc, &from, fromlen, &dht_tosleep, NULL,NULL);
        } else {
            rc = dht_periodic(NULL, 0, NULL, 0, &dht_tosleep, NULL, NULL);
        }
        if(rc < 0) {
            if(errno == EINTR) {
                /* XXX This never happens, but in case it did, what about
                 * dht_tosleep? */
                continue;
            } else {
                perror("dht_periodic");
                if(errno == EINVAL || errno == EFAULT)
                    abort();
                dht_tosleep = 1;
            }
        }
    }
}

void
init_trackers()
{
    tr_list *current;
    int rc;
    unsigned char ipv6[16];
    int ipv6_len = 16;
    static int dht_socket = -1;
    static int dht6_socket = -1;


    if(!notracker) {
        if(trackers == NULL)
            fprintf(stderr, "Warning: no trackers!\n");

        current = trackers;

        while(current) {
            if(!noipv4)
                cpc_spawn connection(current, 0, "started");
            if(!noipv6)
                cpc_spawn connection(current, 1, "started");
            current = current -> next;
        }
    }

    if(!nodht) {
        static unsigned char dht_id[20];
        struct sockaddr_in sin;
        unsigned char v[4] = "HK\0\0";
        int one = 1;

        rc = dht_random_bytes(dht_id, 20);
        if(rc < 20) {
            perror("random(dht_id)");
            goto dht_done;
        }

        if(!noipv4) {
            dht_socket = socket(PF_INET, SOCK_DGRAM, 0);
            if(dht_socket < 0) {
                perror("socket(dht)");
                goto dht4_done;
            }

            memset(&sin, 0, sizeof(sin));
            sin.sin_family = AF_INET;
            sin.sin_port = htons(peer_port);

            rc = bind(dht_socket, (struct sockaddr*)&sin, sizeof(sin));
            if(rc < 0) {
                perror("bind(dht_socket)");
                close(dht_socket);
                dht_socket = -1;
            }
        }

    dht4_done:

        if(!noipv6)
            rc = find_global_address(AF_INET6, ipv6, &ipv6_len);
        else
            rc = -1;
        if(rc >= 0) {
            struct sockaddr_in6 sin6;

            dht6_socket = socket(PF_INET6, SOCK_DGRAM, 0);
            if(dht6_socket < 0) {
                perror("socket(AF_INET6)");
                goto dht6_done;
            }

            memset(&sin6, 0, sizeof(sin6));
            sin6.sin6_family = AF_INET6;
            /* BEP-32 has an explanation of this. */
            memcpy(&sin6.sin6_addr, ipv6, 16);
            sin6.sin6_port = htons(peer_port);

            rc = setsockopt(dht6_socket, IPPROTO_IPV6, IPV6_V6ONLY,
                            &one, sizeof(one));
            if(rc < 0) {
                perror("setsockopt(IPV6_V6ONLY)");
                close(dht6_socket);
                dht6_socket = -1;
                goto dht6_done;
            }

            rc = bind(dht6_socket, (struct sockaddr*)&sin6, sizeof(sin6));
            if(rc < 0) {
                perror("bind(dht6_socket)");
                close(dht6_socket);
                dht6_socket = -1;
            }
        }

    dht6_done:

        if(getenv("HK_DHT_VERBOSE") != NULL)
            dht_debug = stderr;

        rc = dht_init(dht_socket, dht6_socket, dht_id, v);
        if(rc < 0) {
            if(dht_socket > 0)
                close(dht_socket);
            if(dht6_socket > 0)
                close(dht6_socket);
            goto dht_done;
        }

        cpc_spawn dht_loop(dht_socket, dht6_socket);
        if(dht_socket > 0)
            cpc_spawn dht_announcer(AF_INET);
        if(dht6_socket > 0)
            cpc_spawn dht_announcer(AF_INET6);

    dht_done:
        ;
    }
}

/* DHT callbacks */

void
dht_hash(void *hash_return, int hash_size,
         const void *v1, int len1,
         const void *v2, int len2,
         const void *v3, int len3)
{
    static SHA_CTX ctx;
    unsigned char sha1[20];
    SHA1_Init(&ctx);
    SHA1_Update(&ctx, v1, len1);
    SHA1_Update(&ctx, v2, len2);
    SHA1_Update(&ctx, v3, len3);
    SHA1_Final(sha1, &ctx);
    if(hash_size > 20)
        memset((char*)hash_return + 20, 0, hash_size - 20);
    memcpy(hash_return, sha1, hash_size > 20 ? 20 : hash_size);
}

int
dht_random_bytes(void *buf, size_t size)
{
    return random_bytes(buf, size);
}

int
dht_blacklisted(const struct sockaddr *sa, int salen)
{
    return 0;
}
