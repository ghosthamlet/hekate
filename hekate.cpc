/*
Copyright (c) 2009-2010 by Pejman Attar, Yoann Canal, Juliusz Chroboczek and
                      Gabriel Kerneis

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

#define _GNU_SOURCE

#include <cpc/cpc_runtime.h>

#include <assert.h>
#include <dirent.h>
#include <pthread.h>
#include <signal.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>

#include <openssl/sha.h>

#include "util.h"
#include "hashtable.h"
#include "parse.h"
#include "server.h"
#include "torrent.h"
#include "tracker.h"

int list_only = 0;

static int attributes;
static inline int
set_attributes(const char*path)
{
    attributes = GetFileAttributes(path);
    if(attributes == INVALID_FILE_ATTRIBUTES)
        return -1;
    return 0;
}

static inline int
is_a_normal_file(const char*path)
{
    if(path != NULL && set_attributes(path) < 0)
        return -1;
    return attributes &
        (FILE_ATTRIBUTE_NORMAL     |
         FILE_ATTRIBUTE_ARCHIVE    |
         FILE_ATTRIBUTE_COMPRESSED |
         FILE_ATTRIBUTE_ENCRYPTED   ) ? 1 : 0;
}

static inline int
is_a_directory(const char*path)
{
    if(path != NULL && set_attributes(path) < 0)
        return -1;
    return attributes == FILE_ATTRIBUTE_DIRECTORY ? 1 : 0;
}

/*
  getting the directory path and try to add them all to our hashtable
*/
static void
upload(hashtable *table, char *path)
{
    DIR *dir;
    int pos, rc, i;
    char *curr_path;
    buffer *buf;
    benc *result;
    struct torrent *elmt;
    struct dirent *entry;
    char id[41];

    if(path[strlen(path)-1] == '/')
        path[strlen(path)-1] = '\0';

    dir = opendir(path);
    if(dir == NULL) {
        perror("(upload)cannot open directory\n");
        return;
    }

    while((entry = readdir(dir))) {
        if(strcmp(entry->d_name,".") == 0 ||
           strcmp(entry->d_name,"..") == 0) {
            continue;
        }

        curr_path = sprintf_a("%s/%s", path, entry->d_name);
        if(rc < 0){
            perror("(upload)asprintf");
            goto fail;
        }

        if(set_attributes(curr_path) < 0) {
            fprintf(stderr, "%s ", curr_path);
            perror("(upload)lstat");
            free(curr_path);
            continue;
        }

        if(is_a_normal_file(NULL)) {
            pos = strlen(entry->d_name) - 8;

            if(pos >= 0 && strcmp(entry->d_name + pos, ".torrent") == 0) {
                buf = open_buffer(curr_path);
                if(!buf) {
                    fprintf(stderr, "(upload)open_buffer %s\n", curr_path);
                    close_buffer(buf);
                    free(curr_path);
                    continue;
                }

                result = parsing(buf);

                elmt = parse_torrent(path, result);
                if(!elmt) {
                    close_buffer(buf);
                    free(curr_path);
                    continue;
                }

                for(i = 0; i<20; i++)
                    snprintf(id + 2 * i, 3, "%.2x",
                             (unsigned char)*(elmt->info_hash + i));

                if(!!validate_torrent(elmt))
                    debugf(1, "Added: %s %s\n", id, curr_path);
                else {
                    debugf(2, "Skipped: %s %s\n", id, curr_path);
                    close_buffer(buf);
                    free_torrent(elmt);
                    free(curr_path);
                    continue;
                }

                ht_insert(table, elmt);

                /* insert in trackers list */
                tr_insert(elmt);

                close_buffer(buf);
            }
        } else if(is_a_directory(NULL)) {
            upload(table, curr_path);
        }

        free(curr_path);
    }

    fail:
    closedir(dir);
    return;
}

static void
initWSA(void)
{
    WSADATA wsaData;
    WORD versionRequested = MAKEWORD(2,2);
    int rc;
    rc = WSAStartup(versionRequested, &wsaData); /* init wsaData */
    if(rc != 0) {
        printf("WSAStartup: %d", rc);
        exit(1);
    }
}

int
main(int argc, char **argv)
{
    hashtable *table;
    int i;
    unsigned char buf[6];

    while(1) {
        int opt;
        opt = getopt(argc, argv, "thl46p:N:C:T:d:");
        if(opt == -1)
            break;
        switch(opt) {
        case 't':
            notracker = 1;
            break;
        case 'h':
            nodht = 1;
            break;
        case 'l':
            list_only = 1;
            break;
        case '4':
            if(noipv4 == 1)
                goto usage;
            noipv6 = 1;
            break;
        case '6':
            if(noipv6 == 1)
                goto usage;
            noipv4 = 1;
            break;
        case 'p':
            peer_port = atoi(optarg);
            if(peer_port <= 0 || peer_port > 0x10000)
                goto usage;
            break;
        case 'N':
            maxunchoked = atoi(optarg);
            if(maxunchoked <= 0 || maxunchoked > 10000)
                goto usage;
            break;
        case 'C':
            initial_credit = atoi(optarg);
            if(initial_credit < 16 * 1024 ||
               initial_credit > 1024 * 1024 * 1024)
                goto usage;
            break;
        case 'T':
            max_unchoked_time = atoi(optarg);
            if(max_unchoked_time < 0)
                goto usage;
        case 'd':
            debug_level = atoi(optarg);
            break;
        default:
            goto usage;
        }
    }

    if(optind >= argc )
        goto usage;

    pagesize = getpagesize();

    strcpy(peer_id, "-HK0000-");

    srand((GetCurrentThreadId() + 19) * (GetCurrentProcessId() + 71)
          * (rand() + 42) * time(NULL));
    random_bytes(buf, 6);

    for(i = 0; i < 6; i++)
        snprintf(peer_id + 8 + 2 * i, 21 - (8 + 2 * i), "%02X",
                 (buf[i] & 0xFF));
    peer_id[20] = '\0';

    trackers = NULL;

    table = ht_create(10);
    if(!table) {
        perror("ht_create");
        exit(EXIT_FAILURE);
    }

    if(optind >= argc)
        goto usage;

    if(list_only && debug_level < 1)
        debug_level = 1;

    for(i = optind; i < argc; i++)
        upload(table, argv[i]);

    if(list_only)
        goto quit;

    initWSA();

    init_trackers(trackers);

    cpc_spawn listening(table);

    debugf(2, "Initilisation complete: entering main loop.\n");
    cpc_main_loop();

  quit:
    ht_free(table);

    return 0;

    usage:
    fprintf(stderr,
        "Usage: hekate "
        "[ -t ] [ -h ] [ -l ] [ -4 | -6 ] [ -p port ] [ -N max_unchoked ]\n"
        "              [-C credit] [-d debug]\n"
        "              directory...\n");
    exit(1);
}
