/*
Copyright (c) 2009-2011 by Juliusz Chroboczek and Gabriel Kerneis.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

/*  ACHTUNG!
    ALLES TURISTEN UND NONTEKNISCHEN LOOKENPEEPERS!
    DAS FILE IST FUR CPC, TORRENT DINGS IST VERBOTEN!
    ZO RELAXEN UND WATSCHEN DER BLINKENLICHTEN.
*/

#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <sys/uio.h>
#include <poll.h>
#include <assert.h>
#include <string.h>

#include <cpc/cpc_runtime.h>
#include <cpc/cpc_lib.h>
#include "io.h"

const int io_timeout = 60; /* one minute timeout per I/O (read) */

cps void
cpc_io_wait_2(int fd1, int fd2, cpc_condvar *c)
{
    cpc_barrier *barrier = cpc_barrier_get(3);

    cpc_spawn {
        cpc_io_wait(fd1, CPC_IO_IN, c);
        cpc_signal(c);
        cpc_barrier_await(barrier);
    }

    cpc_spawn {
        cpc_io_wait(fd2, CPC_IO_IN, c);
        cpc_signal(c);
        cpc_barrier_await(barrier);
    }

    cpc_barrier_await(barrier);
}

cps int
cpc_buffer_read(int fd, cpc_buffer *b, int len)
{
    size_t pos;
    ssize_t rc;

    assert(b->end - b->start >= 0);
    pos = b->end - b->start;

    /* No need to read more data */
    if(pos >= len)
        return pos;
    else if(len > b->size) {
        errno = ENOMEM;
        return -1;
    }

    cpc_timeout *t = cpc_timeout_get(io_timeout, 0);
    cpc_condvar *c = cpc_timeout_condvar(t);

    /* Lazy allocation of the buffer the first time */
    if(!b->buf) {
        if(cpc_io_wait(fd, CPC_IO_IN, c) == CPC_CONDVAR) {
            goto timeout;
        } else {
            assert(b->start == 0 && b->end == 0);
            b->buf = malloc(b->size);
            goto first_read;
        }
    }

    /* Move data to the beginning of buffer */
    if(b->start > 0) {
        if(pos > 0)
            memmove(b->buf, b->buf + b->start, pos);
        b->start = 0;
    }

    while(1) {
        /* io_wait the first time, it's necessary 95% of the time */
        if(cpc_timeout_expired(t) ||
           cpc_io_wait(fd, CPC_IO_IN, c) == CPC_CONDVAR) {
            goto timeout;
        }
first_read:
        rc = read(fd, b->buf + pos, b->size - pos);
        if(rc == 0) {
            errno = EPIPE;
            goto fail;
        } else if(rc < 0) {
            if(errno != EAGAIN)
                goto fail;
        } else {
            pos += rc;
            if(pos >= len)
                break;
        }
    }

    b->end = pos;
    cpc_timeout_destroy(t);
    return pos;

timeout:
    debugf(2, "%3d timed out\n", fd);
    errno = EINTR;
fail:
    cpc_timeout_destroy(t);
    b->end = pos;
    return -1;
}

cps int
cpc_full_write(int fd, const char *buf, int len)
{
    size_t pos;
    ssize_t rc;

    pos = 0;
    while(1) {
        /* Don't io_wait the first time. */
        rc = write(fd, buf + pos, len - pos);
        if(rc < 0) {
            if(errno != EAGAIN)
                return -1;
        } else {
            pos += rc;
            if(pos >= len)
                break;
        }
        cpc_io_wait(fd, CPC_IO_OUT);
    }

    return pos;
}

cps int
cpc_full_writev(int fd, const struct iovec *iov, int iovcnt)
{
    size_t pos, total;
    ssize_t rc;
    int i;

    if(iovcnt == 0)
        return 0;
    else if(iovcnt == 1)
        return cpc_full_write(fd, iov[0].iov_base, iov[0].iov_len);

    total = 0;
    for(i = 0; i < iovcnt; i++)
        total += iov[i].iov_len;

    pos = 0;
    while(1) {
        if(pos == 0) {
            rc = writev(fd, iov, iovcnt);
        } else {
            size_t s = 0;
            for(i = 0; i < iovcnt; i++) {
                if(pos < s + iov[i].iov_len)
                    break;
                s += iov[i].iov_len;
            }
            assert(i < iovcnt);

            if(i == iovcnt - 1) {
                rc = write(fd, (char*)iov[i].iov_base + (pos - s),
                           iov[i].iov_len - (pos - s));
            } else if(pos == s) {
                rc = writev(fd, iov + i, iovcnt - i);
            } else {
                struct iovec newiov[8];
                int j;
                newiov[0].iov_base = (char*)iov[i].iov_base + (pos - s);
                newiov[0].iov_len = iov[i].iov_len - (pos - s);
                for(j = 1; j < iovcnt - i; j++)
                    newiov[j] = iov[j + i];
                rc = writev(fd, newiov, j);
            }
        }

        if(rc < 0) {
            if(errno != EAGAIN)
                return -1;
        } else {
            pos += rc;
            if(pos >= total)
                break;
        }
        cpc_io_wait(fd, CPC_IO_OUT);
    }

    return pos;
}

cpc_buffer *
cpc_buffer_get(int size) {
  cpc_buffer *b = malloc(sizeof(cpc_buffer));
  b->size = size;
  b->start = 0;
  b->end = 0;
  b->buf = NULL;
  return b;
}

void
cpc_buffer_destroy(cpc_buffer *b) {
  if(b->buf)
      free(b->buf);
  free(b);
}
