/*
Copyright (c) 2009-2011 by Juliusz Chroboczek and Gabriel Kerneis.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

/*  ACHTUNG!
    ALLES TURISTEN UND NONTEKNISCHEN LOOKENPEEPERS!
    DAS FILE IST FUR CPC, TORRENT DINGS IST VERBOTEN!
    ZO RELAXEN UND WATSCHEN DER BLINKENLICHTEN.
*/

#include <cpc/cpc_runtime.h>
#include <cpc/cpc_lib.h>
#include "io.h"

const int io_timeout = 60; /* one minute timeout per I/O (read) */

cps int
cpc_buffer_read(cpc_handle_t sock, cpc_buffer *b, int len)
{
    size_t pos;
    ssize_t rc;

    assert(b->start <= b->end);
    pos = b->end - b->start;

    /* No need to read more data */
    if(pos >= len) {
        return pos;
    } else if(len > b->size) {
        errno = ENOMEM;
        return -1;
    }

    cpc_timeout *timeout = cpc_timeout_get(io_timeout, 0);
    cpc_condvar *cond = cpc_timeout_condvar(timeout);

    if(!b->buf) {
        assert(b->start == 0 && b->end == 0);
        b->buf = malloc(b->size);
        goto first_read;
    }

    /* Move data to the beginning of buffer */
    if(b->start > 0) {
        if(pos > 0)
            memmove(b->buf, b->buf + b->start, pos);
        b->start = 0;
    }

    while(1) {
        if(cpc_timeout_expired(timeout))
            goto timeout;
first_read:
        rc = cpc_recv_cond(sock, b->buf + pos, b->size-pos, cond);
        if(rc == 0) {
            errno = EPIPE;
            goto fail;
        } else if(rc < 0) {
            if(rc == -CPC_CONDVAR)
                goto timeout;
            goto fail;
        } else {
            pos += rc;
            if(pos >= len)
                break;
        }
    }

    b->end = pos;
    cpc_timeout_destroy(timeout);
    return pos;

timeout:
    debugf(2, "%3d timed out\n", sock->cpch_handle);
    errno = EINTR;
fail:
    cpc_timeout_destroy(timeout);
    b->end = pos;
    return -1;
}

cpc_buffer *
cpc_buffer_get(int size) {
  cpc_buffer *b = malloc(sizeof(cpc_buffer));
  b->size = size;
  b->start = 0;
  b->end = 0;
  b->buf = NULL;
  return b;
}

void
cpc_buffer_destroy(cpc_buffer *b) {
  if(b->buf)
      free(b->buf);
  free(b);
}
